package main

import (
	"github.com/newalchemylimited/seth"
)

var TestCode = []byte{0x60, 0x60, 0x60, 0x40, 0x52, 0x34, 0x15, 0x61, 0x0, 0xf, 0x57, 0x60, 0x0, 0x80, 0xfd, 0x5b, 0x60, 0xf8, 0x80, 0x61, 0x0, 0x1d, 0x60, 0x0, 0x39, 0x60, 0x0, 0xf3, 0x0, 0x60, 0x60, 0x60, 0x40, 0x52, 0x60, 0x4, 0x36, 0x10, 0x60, 0x5c, 0x57, 0x63, 0xff, 0xff, 0xff, 0xff, 0x7c, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x35, 0x4, 0x16, 0x63, 0xa, 0xb3, 0xfd, 0x22, 0x81, 0x14, 0x60, 0x61, 0x57, 0x80, 0x63, 0x37, 0x13, 0x3, 0xc0, 0x14, 0x60, 0x73, 0x57, 0x80, 0x63, 0x3f, 0xa4, 0xf2, 0x45, 0x14, 0x60, 0x83, 0x57, 0x80, 0x63, 0x61, 0xbc, 0x22, 0x1a, 0x14, 0x60, 0xa5, 0x57, 0x5b, 0x60, 0x0, 0x80, 0xfd, 0x5b, 0x34, 0x15, 0x60, 0x6b, 0x57, 0x60, 0x0, 0x80, 0xfd, 0x5b, 0x60, 0x71, 0x60, 0x5c, 0x56, 0x5b, 0x0, 0x5b, 0x34, 0x15, 0x60, 0x7d, 0x57, 0x60, 0x0, 0x80, 0xfd, 0x5b, 0x60, 0x71, 0x60, 0xb5, 0x56, 0x5b, 0x34, 0x15, 0x60, 0x8d, 0x57, 0x60, 0x0, 0x80, 0xfd, 0x5b, 0x60, 0x93, 0x60, 0xc0, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x90, 0x81, 0x52, 0x60, 0x20, 0x1, 0x60, 0x40, 0x51, 0x80, 0x91, 0x3, 0x90, 0xf3, 0x5b, 0x34, 0x15, 0x60, 0xaf, 0x57, 0x60, 0x0, 0x80, 0xfd, 0x5b, 0x60, 0x93, 0x60, 0xc6, 0x56, 0x5b, 0x60, 0x0, 0x80, 0x54, 0x60, 0x1, 0x1, 0x90, 0x55, 0x56, 0x5b, 0x60, 0x0, 0x54, 0x90, 0x56, 0x5b, 0x60, 0x0, 0x54, 0x81, 0x56, 0x0, 0xa1, 0x65, 0x62, 0x7a, 0x7a, 0x72, 0x30, 0x58, 0x20, 0x6e, 0x6, 0x3d, 0x46, 0x84, 0xbd, 0xc6, 0x6b, 0xcc, 0x1d, 0x92, 0x48, 0xe1, 0x45, 0x40, 0xa, 0x45, 0xc2, 0xec, 0x71, 0x11, 0xca, 0x10, 0xc7, 0x44, 0x23, 0x9, 0x83, 0xc4, 0x9f, 0x1c, 0x74, 0x0, 0x29}

type Test struct {
	addr *seth.Address
	s    *seth.Sender
}

func NewTest(addr *seth.Address, sender *seth.Sender) *Test {
	return &Test{addr: addr, s: sender}
}

func (z *Test) MustThrow() (seth.Hash, error) {
	return z.s.Send(z.addr, "mustThrow()")
}
func (z *Test) Inc() (seth.Hash, error) {
	return z.s.Send(z.addr, "inc()")
}
func (z *Test) Value() (ret0 seth.Int, err error) {
	d := seth.NewABIDecoder(&ret0)
	err = z.s.ConstCall(z.addr, "value()", d)
	return
}
func (z *Test) Counter() (ret0 seth.Int, err error) {
	d := seth.NewABIDecoder(&ret0)
	err = z.s.ConstCall(z.addr, "counter()", d)
	return
}
